name: Deploy to AWS S3

on:
  push:
    branches:
      - main

jobs:
  # --------------------------------------
  # 1. TEST JOB: Lint, Format, Coverage
  # --------------------------------------
  test:
    runs-on: ubuntu-latest
    outputs:
      coverage_passed: ${{ steps.test_and_coverage.outputs.coverage_passed }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Cache Node Modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm-${{ runner.os }}-${{ hashFiles('package-lock.json', 'package.json') }}
          restore-keys: npm-${{ runner.os }}-

      - name: Install Dependencies
        run: npm ci

      - name: Run lint
        run: |
          npm run lint || (echo "‚ùå Linting failed" > error_reason.txt && exit 1)

      - name: Run format check
        run: |
          npm run format || (echo "‚ùå Formatting check failed" > error_reason.txt && exit 1)

      - name: Check commit messages
        uses: wagoid/commitlint-github-action@v3
        with:
          configFile: commitlint.config.cjs

      - name: Debug - Project Structure
        run: |
          echo "Project structure:"
          find src/components -type d | sort
          echo "Test files found:"
          find src -name "*.test.js" || echo "No test files found"

      - name: Clear Jest Cache
        run: npx jest --clearCache

      - name: Run Tests and Generate Coverage
        id: test_and_coverage
        run: |
          THRESHOLD=90
          COVERAGE_FILE="coverage/coverage-final.json"
          REPORT_FILE="error_reason.txt"
          TEST_FAILED=0
          COVERAGE_FAILED=0

          echo "" > $REPORT_FILE

          echo "üì¶ Running tests with coverage..."
          if ! npx jest --coverage --json --outputFile=test-results.json; then
            echo "‚ùå TEST FAILURES DETECTED" >> $REPORT_FILE
            echo "Some unit tests failed to pass" >> $REPORT_FILE
            echo "-----------------------------------" >> $REPORT_FILE
            TEST_FAILED=1

            if [ -f "test-results.json" ]; then
              echo "Test Failure Details:" >> $REPORT_FILE
              jq -r '.testResults[] | select(.status == "failed") | "Test Suite: \(.name)\n  Failed Tests: \(.assertionResults[] | select(.status == "failed") | "\(.title) (Line \(.line))")\n"' test-results.json >> $REPORT_FILE
            fi
          fi

          echo "üìä COVERAGE REPORT" >> $REPORT_FILE
          echo "Expected threshold: ${THRESHOLD}%" >> $REPORT_FILE
          echo "===================================" >> $REPORT_FILE

          if [ ! -f "$COVERAGE_FILE" ]; then
            echo "‚ùå Coverage report not found!" >> $REPORT_FILE
            echo "coverage_passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          echo "Processing coverage data..." >> $REPORT_FILE

          COVERAGE_DATA=$(jq -r 'to_entries[] | select(.key | test("node_modules/") | not) | select(.key | test("__tests__/") | not) | select(.value.statements.pct != null) | "\(.key)|\(.value.statements.pct)|\(.value.branches.pct)|\(.value.functions.pct)|\(.value.lines.pct)"' "$COVERAGE_FILE")

          if [ -z "$COVERAGE_DATA" ]; then
            echo "‚ùå No valid coverage data found!" >> $REPORT_FILE
            echo "coverage_passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          FAILED_FILES=0
          PASSED_FILES=0
          TOTAL_FILES=0

          echo "File | % Stmts | % Branch | % Funcs | % Lines | Status" >> $REPORT_FILE
          echo "-----|---------|----------|---------|---------|--------" >> $REPORT_FILE

          while IFS='|' read -r file stmts branches funcs lines; do
            TOTAL_FILES=$((TOTAL_FILES + 1))

            if (( $(echo "$stmts < $THRESHOLD" | bc -l) )) || \
               (( $(echo "$branches < $THRESHOLD" | bc -l) )) || \
               (( $(echo "$funcs < $THRESHOLD" | bc -l) )) || \
               (( $(echo "$lines < $THRESHOLD" | bc -l) )); then
              STATUS="‚ùå FAILED"
              FAILED_FILES=$((FAILED_FILES + 1))
            else
              STATUS="‚úÖ PASSED"
              PASSED_FILES=$((PASSED_FILES + 1))
            fi

            DISPLAY_FILE=$(echo "$file" | sed 's|.*/src/|src/|')

            printf "%-30s | %7s | %8s | %7s | %7s | %s\n" \
              "$DISPLAY_FILE" "$stmts" "$branches" "$funcs" "$lines" "$STATUS" >> $REPORT_FILE
          done <<< "$COVERAGE_DATA"

          echo "===================================" >> $REPORT_FILE
          echo "üìä COVERAGE SUMMARY" >> $REPORT_FILE
          echo "   - Total files checked: $TOTAL_FILES" >> $REPORT_FILE
          echo "   - Passed coverage: $PASSED_FILES" >> $REPORT_FILE
          echo "   - Failed coverage: $FAILED_FILES" >> $REPORT_FILE
          echo "   - Coverage threshold: $THRESHOLD%" >> $REPORT_FILE

          if [ "$FAILED_FILES" -gt 0 ]; then
            COVERAGE_FAILED=1
            echo "‚ùå COVERAGE FAILURES DETECTED" >> $REPORT_FILE
            echo "The following files failed coverage threshold:" >> $REPORT_FILE

            while IFS='|' read -r file stmts branches funcs lines; do
              if (( $(echo "$stmts < $THRESHOLD" | bc -l) )) || \
                 (( $(echo "$branches < $THRESHOLD" | bc -l) )) || \
                 (( $(echo "$funcs < $THRESHOLD" | bc -l) )) || \
                 (( $(echo "$lines < $THRESHOLD" | bc -l) )); then
                DISPLAY_FILE=$(echo "$file" | sed 's|.*/src/|src/|')
                echo "File: $DISPLAY_FILE" >> $REPORT_FILE
                [ $(echo "$stmts < $THRESHOLD" | bc -l) -eq 1 ] && echo "  - Statements: $stmts% (needs $THRESHOLD%)" >> $REPORT_FILE
                [ $(echo "$branches < $THRESHOLD" | bc -l) -eq 1 ] && echo "  - Branches: $branches% (needs $THRESHOLD%)" >> $REPORT_FILE
                [ $(echo "$funcs < $THRESHOLD" | bc -l) -eq 1 ] && echo "  - Functions: $funcs% (needs $THRESHOLD%)" >> $REPORT_FILE
                [ $(echo "$lines < $THRESHOLD" | bc -l) -eq 1 ] && echo "  - Lines: $lines% (needs $THRESHOLD%)" >> $REPORT_FILE
              fi
            done <<< "$COVERAGE_DATA"
          fi

          if [ "$TEST_FAILED" -eq 1 ] || [ "$COVERAGE_FAILED" -eq 1 ]; then
            echo "coverage_passed=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "‚úÖ All tests passed and coverage is above threshold" >> $REPORT_FILE
            echo "coverage_passed=true" >> $GITHUB_OUTPUT
          fi

      - name: Upload Error Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: error-report
          path: error_reason.txt
          retention-days: 1

      - name: Debug - Show Error Report
        if: always()
        run: |
          echo "Error report content:"
          cat error_reason.txt || echo "No error report file found"

  # --------------------------------------
  # 2. DEPLOY JOB: Only if test passes
  # --------------------------------------
  deploy:
    needs: test
    if: ${{ needs.test.outputs.coverage_passed == 'true' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Dependencies
        run: npm ci

      - name: Build Application
        run: npm run build

      - name: Debug - Check Build Folder
        run: |
          echo "Checking build directory:"
          ls -l build || echo "‚ö†Ô∏è Build folder is missing!"

      - name: Debug - Check AWS S3 Bucket Name
        run: |
          echo "Target S3 Bucket: ${{ secrets.AWS_S3_BUCKET_NAME }}"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to AWS S3
        run: aws s3 sync build/ s3://${{ secrets.AWS_S3_BUCKET_NAME }} --delete --exact-timestamps --debug

      - name: Debug - List S3 Bucket Contents
        run: aws s3 ls s3://${{ secrets.AWS_S3_BUCKET_NAME }} --recursive

  # --------------------------------------
  # 3. NOTIFY ON SUCCESS
  # --------------------------------------
  notify-success:
    needs: deploy
    if: ${{ success() }}
    runs-on: ubuntu-latest

    steps:
      - name: Send Success Email
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.EMAIL_SERVER }}
          server_port: ${{ secrets.EMAIL_PORT }}
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: '‚úÖ Deployment Successful - ${{ github.repository }}'
          to: ${{ secrets.EMAIL_TO }}
          from: ${{ secrets.EMAIL_FROM }}
          body: |
            The deployment of your React app was successful üéâ

            ‚úÖ Branch: ${{ github.ref_name }}
            ‚úÖ Commit: ${{ github.sha }}
            ‚úÖ Triggered by: ${{ github.actor }}

            üìÇ [View Workflow Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
