name: Deploy to AWS S3

on:
  push:
    branches:
      - main

jobs:
  # -------------------------------
  # 1. TEST JOB: Lint, Format, Coverage
  # -------------------------------
  test:
    runs-on: ubuntu-latest
    outputs:
      coverage_passed: ${{ steps.check_coverage.outputs.coverage_passed }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Cache Node Modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm-${{ runner.os }}-${{ hashFiles('package-lock.json', 'package.json') }}
          restore-keys: npm-${{ runner.os }}-

      - name: Install Dependencies
        run: npm ci

      - name: Run lint
        run: |
          npm run lint || (echo "‚ùå Linting failed" > error_reason.txt && exit 1)

      - name: Run format check
        run: |
          npm run format || (echo "‚ùå Formatting check failed" > error_reason.txt && exit 1)

      - name: Check commit messages
        uses: wagoid/commitlint-github-action@v3
        with:
          configFile: commitlint.config.cjs

      - name: Debug - Project Structure
        run: |
          echo "Project structure:"
          find src/components -type d | sort
          echo "Test files found:"
          find src -name "*.test.js" || echo "No test files found"

      - name: Clear Jest Cache
        run: npx jest --clearCache

      - name: Run Tests with Coverage
        run: |
          if ! npm test -- --coverage --collectCoverageFrom='src/components/**/*.js'; then
            echo "‚ö†Ô∏è Jest test command failed. Proceeding to check coverage details..." >> error_reason.txt
          fi

      - name: Check Component Coverage
        id: check_coverage
        run: |
          THRESHOLD=90
          COVERAGE_FILE="coverage/coverage-final.json"
          REPORT_FILE="error_reason.txt"

          # Initialize error report
          echo "üìä Detailed Component Coverage Report" > $REPORT_FILE
          echo "Expected threshold: ${THRESHOLD}%" >> $REPORT_FILE
          echo "===================================" >> $REPORT_FILE

          if [ ! -f "$COVERAGE_FILE" ]; then
            echo "‚ùå Coverage report not found!" >> $REPORT_FILE
            echo "coverage_passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          COMPONENT_FILES=$(jq -r 'keys[] | select(contains("__tests__") | not)' "$COVERAGE_FILE")

          if [ -z "$COMPONENT_FILES" ]; then
            echo "‚ùå No component files found in coverage report!" >> $REPORT_FILE
            echo "coverage_passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          FAILED_FILES=0
          PASSED_FILES=0

          while IFS= read -r file; do
            # Extract coverage data
            STATEMENTS=$(jq -r ".[\"$file\"].statements.pct" "$COVERAGE_FILE")
            BRANCHES=$(jq -r ".[\"$file\"].branches.pct" "$COVERAGE_FILE")
            LINES=$(jq -r ".[\"$file\"].lines.pct" "$COVERAGE_FILE")
            FUNCTIONS=$(jq -r ".[\"$file\"].functions.pct" "$COVERAGE_FILE")

            if [ "$STATEMENTS" = "null" ]; then
              echo "‚ö†Ô∏è No coverage data for $file" >> $REPORT_FILE
              continue
            fi

            # Check against threshold
            if (( $(echo "$STATEMENTS < $THRESHOLD" | bc -l) || \
                $(echo "$BRANCHES < $THRESHOLD" | bc -l) || \
                $(echo "$LINES < $THRESHOLD" | bc -l) || \
                $(echo "$FUNCTIONS < $THRESHOLD" | bc -l) )); then
              echo "‚ùå $file failed:" >> $REPORT_FILE
              echo "   - Statements: $STATEMENTS% (expected ‚â•$THRESHOLD%)" >> $REPORT_FILE
              echo "   - Branches:   $BRANCHES% (expected ‚â•$THRESHOLD%)" >> $REPORT_FILE
              echo "   - Lines:      $LINES% (expected ‚â•$THRESHOLD%)" >> $REPORT_FILE
              echo "   - Functions:  $FUNCTIONS% (expected ‚â•$THRESHOLD%)" >> $REPORT_FILE
              FAILED_FILES=$((FAILED_FILES + 1))
            else
              echo "‚úÖ $file passed:" >> $REPORT_FILE
              echo "   - Statements: $STATEMENTS%" >> $REPORT_FILE
              PASSED_FILES=$((PASSED_FILES + 1))
            fi
            echo "-----------------------------------" >> $REPORT_FILE
          done <<< "$COMPONENT_FILES"

          # Summary
          echo "üìä Coverage Summary:" >> $REPORT_FILE
          echo "   - Total components checked: $((FAILED_FILES + PASSED_FILES))" >> $REPORT_FILE
          echo "   - Passed: $PASSED_FILES" >> $REPORT_FILE
          echo "   - Failed: $FAILED_FILES" >> $REPORT_FILE

          if [ "$FAILED_FILES" -gt 0 ]; then
            echo "‚ùå $FAILED_FILES component(s) below ${THRESHOLD}% coverage" >> $REPORT_FILE
            echo "coverage_passed=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "‚úÖ All components meet ${THRESHOLD}% coverage" >> $REPORT_FILE
            echo "coverage_passed=true" >> $GITHUB_OUTPUT
          fi

      - name: Upload Error Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: error-report
          path: error_reason.txt
          retention-days: 1

      - name: Debug - Show Error Report
        if: always()
        run: |
          echo "Error report content:"
          cat error_reason.txt || echo "No error report file found"

  # -------------------------------
  # 2. DEPLOY JOB: Only if test passes
  # -------------------------------
  deploy:
    needs: test
    if: ${{ needs.test.outputs.coverage_passed == 'true' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Dependencies
        run: npm ci

      - name: Build Application
        run: npm run build

      - name: Debug - Check Build Folder
        run: |
          echo "Checking build directory:"
          ls -l build || echo "‚ö†Ô∏è Build folder is missing!"

      - name: Debug - Check AWS S3 Bucket Name
        run: |
          echo "Target S3 Bucket: ${{ secrets.AWS_S3_BUCKET_NAME }}"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to AWS S3
        run: aws s3 sync build/ s3://${{ secrets.AWS_S3_BUCKET_NAME }} --delete --exact-timestamps --debug

      - name: Debug - List S3 Bucket Contents
        run: aws s3 ls s3://${{ secrets.AWS_S3_BUCKET_NAME }} --recursive

  # -------------------------------
  # 3. NOTIFY ON SUCCESS
  # -------------------------------
  notify-success:
    needs: deploy
    if: ${{ success() }}
    runs-on: ubuntu-latest

    steps:
      - name: Send Success Email
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.EMAIL_SERVER }}
          server_port: ${{ secrets.EMAIL_PORT }}
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: '‚úÖ Deployment Successful - ${{ github.repository }}'
          to: ${{ secrets.EMAIL_TO }}
          from: ${{ secrets.EMAIL_FROM }}
          body: |
            The deployment of your React app was successful üéâ

            ‚úÖ Branch: ${{ github.ref_name }}
            ‚úÖ Commit: ${{ github.sha }}
            ‚úÖ Triggered by: ${{ github.actor }}

            üìÇ [View Workflow Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

  # -------------------------------
  # 4. NOTIFY ON FAILURE
  # -------------------------------
  notify-failure:
    needs: test
    if: ${{ failure() && needs.test.result == 'failure' }}
    runs-on: ubuntu-latest

    steps:
      - name: Download Error Report
        if: always()
        uses: actions/download-artifact@v4
        with:
          name: error-report
          path: ./report

      - name: Read error_reason.txt into multiline output
        id: read_reason
        run: |
          {
            echo "body<<EOF"
            cat ./report/error_reason.txt || echo "No error report available"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Send Failure Email
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.EMAIL_SERVER }}
          server_port: ${{ secrets.EMAIL_PORT }}
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: 'CI Failure - ${{ github.repository }}'
          to: ${{ secrets.EMAIL_TO }}
          from: ${{ secrets.EMAIL_FROM }}
          html: true
          body: |
            <h2>CI pipeline failed </h2>

            <p><strong>Branch:</strong> ${{ github.ref_name }}<br>
            <strong>Commit:</strong> ${{ github.sha }}<br>
            <strong>Triggered by:</strong> ${{ github.actor }}</p>

            <h3>Detailed Coverage Report:</h3>
            <pre>${{ steps.read_reason.outputs.body }}</pre>


            <p><a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}">View Workflow Logs</a></p>
