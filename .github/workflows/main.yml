name: Deploy to AWS S3
on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    outputs:
      coverage_passed: ${{ steps.set_output.outputs.coverage_passed }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Cache Node Modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm-${{ runner.os }}-${{ hashFiles('package-lock.json') }}
          restore-keys: npm-${{ runner.os }}-

      - name: Install Dependencies
        run: npm ci

      - name: Run Tests with Coverage
        run: npm test -- --coverage --watchAll=false --maxWorkers=2 --forceExit --detectOpenHandles

      - name: Check Coverage Threshold for Each File
        id: check_coverage
        run: |
          THRESHOLD=90
          COVERAGE_FILE="coverage/coverage-final.json"

          if [ ! -f "$COVERAGE_FILE" ]; then
            echo "❌ Coverage report not found! Looked for: $COVERAGE_FILE"
            exit 1
          fi

          # Debug: Show the structure of the coverage file
          echo "Coverage file content:"
          cat "$COVERAGE_FILE" | jq .

          # Try different paths to find the coverage percentage
          COVERAGE_PERCENT=$(jq -r '.total.statements.pct // .statementMap.total.pct // .summary.total.statements.pct' "$COVERAGE_FILE")

          echo "Extracted coverage percentage: $COVERAGE_PERCENT%"

          if [ "$COVERAGE_PERCENT" = "null" ]; then
            echo "❌ Could not determine coverage percentage from file structure"
            exit 1
          fi

          if awk "BEGIN {exit !($COVERAGE_PERCENT >= $THRESHOLD)}"; then
            echo "✅ Coverage meets the required threshold!"
            echo "coverage_passed=true" >> $GITHUB_ENV
          else
            echo "❌ Coverage is below threshold ($THRESHOLD%)!"
            echo "coverage_passed=false" >> $GITHUB_ENV
            exit 1
          fi

          # Extract total statement coverage percentage
          COVERAGE_PERCENT=$(jq '.total.statements.pct' "$COVERAGE_FILE")

          echo "Total coverage: $COVERAGE_PERCENT%"

          if awk "BEGIN {exit !($COVERAGE_PERCENT >= $THRESHOLD)}"; then
            echo "✅ Coverage meets the required threshold!"
            echo "coverage_passed=true" >> $GITHUB_ENV
          else
            echo "❌ Coverage is below threshold ($THRESHOLD%)!"
            echo "coverage_passed=false" >> $GITHUB_ENV
            exit 1
          fi

          # Extract total statement coverage percentage
          COVERAGE_PERCENT=$(jq '.total.statements.pct' "$COVERAGE_FILE")

          echo "Total coverage: $COVERAGE_PERCENT%"

          if awk "BEGIN {exit !($COVERAGE_PERCENT >= $THRESHOLD)}"; then
            echo "✅ Coverage meets the required threshold!"
            echo "coverage_passed=true" >> $GITHUB_ENV
          else
            echo "❌ Coverage is below threshold ($THRESHOLD%)!"
            echo "coverage_passed=false" >> $GITHUB_ENV
            exit 1
          fi

      - name: Set Output Variable
        id: set_output
        run: echo "coverage_passed=${{ env.coverage_passed }}" >> $GITHUB_OUTPUT

  deploy:
    needs: test
    if: needs.test.outputs.coverage_passed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Dependencies
        run: npm install

      - name: Build Application
        run: npm run build

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1 # Update if needed

      - name: Deploy to AWS S3
        run: aws s3 sync build s3://demotestbucket334 --delete
