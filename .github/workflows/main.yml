name: Deploy to AWS S3

on:
  push:
    branches:
      - main

jobs:
  # --------------------------------------
  # 1. TEST JOB: Lint, Format, Coverage
  # --------------------------------------
  test:
    runs-on: ubuntu-latest
    outputs:
      coverage_passed: ${{ steps.test_and_coverage.outputs.coverage_passed }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Cache Node Modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm-${{ runner.os }}-${{ hashFiles('package-lock.json', 'package.json') }}
          restore-keys: npm-${{ runner.os }}-

      - name: Install Dependencies
        run: npm ci

      - name: Run lint
        run: |
          npm run lint || (echo "‚ùå Linting failed" > error_reason.txt && exit 1)

      - name: Run format check
        run: |
          npm run format || (echo "‚ùå Formatting check failed" > error_reason.txt && exit 1)

      - name: Check commit messages
        uses: wagoid/commitlint-github-action@v3
        with:
          configFile: commitlint.config.cjs

      - name: Debug - Project Structure
        run: |
          echo "Project structure:"
          find src/components -type d | sort
          echo "Test files found:"
          find src -name "*.test.js" || echo "No test files found"

      - name: Clear Jest Cache
        run: npx jest --clearCache

      - name: Run Tests and Generate Coverage
        id: test_and_coverage
        run: |
          # [Test + Coverage script ‚Äì unchanged for brevity]

      - name: Upload Error Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: error-report
          path: error_reason.txt
          retention-days: 1

      - name: Debug - Show Error Report
        if: always()
        run: |
          echo "Error report content:"
          cat error_reason.txt || echo "No error report file found"

  # --------------------------------------
  # 2. DEPLOY JOB: Only if test passes
  # --------------------------------------
  deploy:
    needs: test
    if: ${{ needs.test.outputs.coverage_passed == 'true' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Dependencies
        run: npm ci

      - name: Build Application
        run: npm run build

      - name: Debug - Check Build Folder
        run: |
          echo "Checking build directory:"
          ls -l build || echo "‚ö†Ô∏è Build folder is missing!"

      - name: Debug - Check AWS S3 Bucket Name
        run: |
          echo "Target S3 Bucket: ${{ secrets.AWS_S3_BUCKET_NAME }}"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to AWS S3
        run: aws s3 sync build/ s3://${{ secrets.AWS_S3_BUCKET_NAME }} --delete --exact-timestamps --debug

      - name: Debug - List S3 Bucket Contents
        run: aws s3 ls s3://${{ secrets.AWS_S3_BUCKET_NAME }} --recursive

  # --------------------------------------
  # 3. NOTIFY ON SUCCESS
  # --------------------------------------
  notify-success:
    needs: deploy
    if: ${{ success() }}
    runs-on: ubuntu-latest

    steps:
      - name: Send Success Email
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.EMAIL_SERVER }}
          server_port: ${{ secrets.EMAIL_PORT }}
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: '‚úÖ Deployment Successful - ${{ github.repository }}'
          to: ${{ secrets.EMAIL_TO }}
          from: ${{ secrets.EMAIL_FROM }}
          body: |
            The deployment of your React app was successful üéâ

            ‚úÖ Branch: ${{ github.ref_name }}
            ‚úÖ Commit: ${{ github.sha }}
            ‚úÖ Triggered by: ${{ github.actor }}

            üìÇ [View Workflow Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

  # --------------------------------------
  # 4. NOTIFY ON FAILURE
  # --------------------------------------
  notify-failure:
    needs: test
    if: ${{ failure() }}
    runs-on: ubuntu-latest

    steps:
      - name: Download Error Report
        uses: actions/download-artifact@v4
        with:
          name: error-report
          path: ./report

      - name: Read error report
        id: error_report
        run: |
          echo "report<<EOF" >> $GITHUB_OUTPUT
          cat ./report/error_reason.txt || echo "No detailed error report available" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Send Failure Email
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.EMAIL_SERVER }}
          server_port: ${{ secrets.EMAIL_PORT }}
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: '‚ùå Deployment Failed - ${{ github.repository }}'
          to: ${{ secrets.EMAIL_TO }}
          from: ${{ secrets.EMAIL_FROM }}
          body: |
            The deployment of your React app has failed ‚ùå

            üîç Error Report:
            ${{ steps.error_report.outputs.report }}

            üõ† Triggered by: ${{ github.actor }}
            üìÇ [View Workflow Logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
