name: Deploy to AWS S3

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    outputs:
      coverage_passed: ${{ steps.check_coverage.outputs.coverage_passed }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Cache Node Modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: npm-${{ runner.os }}-${{ hashFiles('package-lock.json', 'package.json') }}
          restore-keys: npm-${{ runner.os }}-

      - name: Install Dependencies
        run: npm ci

      - name: Debug - List Jest Test Files
        run: npx jest --listTests

      - name: Debug - Check Test Files
        run: ls -R src/components | grep test.js || echo "No test files found"

      - name: Clear Jest Cache
        run: npx jest --clearCache

      - name: Run Tests with Coverage
        run: npm test -- --coverage --coverageDirectory=coverage

      - name: Debug - Check if Coverage Report Exists
        run: ls -R coverage || echo "❌ Coverage report not found!"

      - name: Debug - Print Coverage JSON
        run: cat coverage/coverage-final.json || echo "❌ JSON file missing!"

      - name: Check Test File Coverage
        id: check_coverage
        run: |
          THRESHOLD=90
          COVERAGE_FILE="coverage/coverage-final.json"

          if [ ! -f "$COVERAGE_FILE" ]; then
            echo "❌ Coverage report not found!"
            exit 1
          fi

          SOURCE_FILES=$(jq -r 'keys[] | select(test("\\.js$") and (test("__tests__") | not))' "$COVERAGE_FILE")

          if [ -z "$SOURCE_FILES" ]; then
            echo "❌ No source files found in coverage report!"
            exit 1
          fi

          FAILED_FILES=0
          while IFS= read -r file; do
            COVERAGE=$(jq -r ".[\"$file\"].statements.pct // 0" "$COVERAGE_FILE")
            if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
              echo "❌ $file has $COVERAGE% coverage (below $THRESHOLD%)"
              FAILED_FILES=$((FAILED_FILES + 1))
            else
              echo "✅ $file meets coverage with $COVERAGE%"
            fi
          done <<< "$SOURCE_FILES"

          if [ "$FAILED_FILES" -gt 0 ]; then
            echo "❌ $FAILED_FILES files below $THRESHOLD% coverage"
            echo "coverage_passed=false" >> $GITHUB_ENV
            exit 1
          else
            echo "✅ All source files meet $THRESHOLD% coverage"
            echo "coverage_passed=true" >> $GITHUB_ENV
          fi

  deploy:
    needs: test
    if: needs.test.outputs.coverage_passed == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Dependencies
        run: npm install

      - name: Build Application
        run: npm run build

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Deploy to AWS S3
        run: aws s3 sync build s3://${{ secrets.AWS_S3_BUCKET_NAME }} --delete --exact-timestamps
